load( file.path (PROJHOME , "Results", "acf-nnff.rda"))
}
mod = model2( nn, acf.nnff[[2]], scale = F, specify.model = whi.mi, var2 = ff, var2.time = F, plot=T)
ff
sq = seq(1,dim(nn.coh)[1]-5,5)
nn = nn.coh[sq,]
ff = ff.coh
par( mfrow= c(2,1))
acf( as.vector(nn), lag.max = 1000)
acf( as.vector(ff), lag.max = 1000)
if( file.exists(file.path (PROJHOME , "Results" , "acf-nnff.rda"))){
acf.const = 400 # half way between acf values
acf.nnff = list( acf, acf.const)
save( acf.nnff , file = file.path ( PROJHOME, "Results", "acf-nnff.rda") )
} else {
load( file.path (PROJHOME , "Results", "acf-nnff.rda"))
}
if (  file.exists(file.path(PROJHOME , "Results" , "nnff-AICs.rda"))){
AICs = matrix(NA,n.iter,3)
for ( i in 1:n.iter){
mod= try( model2(nn,acf.nnff[[2]],scale = T, var2 = ff, var2.time = F))
AICs[i,] = mod[[3]]
}
save( AICs , file = file.path(PROJHOME , "Results", "nnff-AICs.rda"))
} else {
load( file.path (PROJHOME , "Results" , "nnff-AICs.rda"))
}
whi.mi = which.min(colMeans(AICs))
print( c("simple linear model is best", "random intercepts only","random intercepts and slopes")[whi.mi])
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
mod
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
p = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
colMeans(stats.nnff.plot[[1]])
median(p)
colMeans(stats.nnff.plot[[1]])
median(p)
summary(lm( as.vector(nn)~as.vector(ff)))
summary(lm( as.vector(nn[seq(1,4000,400)])~as.vector(ff[seq(1,4000,400)])))
summary(lm( as.vector(nn[seq(1,4000,200)])~as.vector(ff[seq(1,4000,200)])))
summary(lm( as.vector(nn[seq(1,4000,100)])~as.vector(ff[seq(1,4000,100)])))
summary(lm( as.vector(nn[seq(1,4000,50)])~as.vector(ff[seq(1,4000,50)])))
summary(lm( as.vector(nn[seq(1,4000,1)])~as.vector(ff[seq(1,4000,1)])))
summary(lm( as.vector(nn[seq(1,4000,1),])~as.vector(ff[seq(1,4000,1),])))
summary(lm( as.vector(nn[seq(1,4000,10),])~as.vector(ff[seq(1,4000,10),])))
summary(lm( as.vector(nn[seq(1,5000,10),])~as.vector(ff[seq(1,5000,10),])))
summary(lm( as.vector(nn[seq(1,5500,10),])~as.vector(ff[seq(1,5500,10),])))
summary(lm( as.vector(nn[seq(1,5500,1),])~as.vector(ff[seq(1,5500,1),])))
summary(lm( as.vector(nn[seq(1,5500,10),])~as.vector(ff[seq(1,5500,10),])))
plot(as.vector(nn)~as.vector(ff))
plot(as.vector(ff)~as.vector(nn))
load( file.path( PROJHOME , "Output" , "centroid.rda"))
load( file.path( PROJHOME , "Output" , "dist2cent.rda"))
len = dim(GPS.coh)[1]
centroid = centroid[1:len,]
dist2cent= dist2cent[1:len,]
obj = fb_lr_d2c(GPS.coh,centroid,dist2cent)
fb.coh = abs(obj[[1]])
lr.coh = abs(obj[[2]])
sq = seq(1,dim(fb.coh)[1]-5,5)
dim(fb.coh)[1]
nn = fb.coh[sq,]
ff = ff.coh
par( mfrow= c(2,1))
acf( as.vector(nn), lag.max = 1000)
fb.coh[sq,]
sq = seq(2,dim(fb.coh)[1]-5,5)
nn = fb.coh[sq,]
ff = ff.coh
par( mfrow= c(2,1))
acf( as.vector(nn), lag.max = 1000)
acf( as.vector(ff), lag.max = 1000)
if( file.exists(file.path (PROJHOME , "Results" , "acf-nnff.rda"))){
acf.const = 400 # half way between acf values
acf.nnff = list( acf, acf.const)
save( acf.nnff , file = file.path ( PROJHOME, "Results", "acf-nnff.rda") )
} else {
load( file.path (PROJHOME , "Results", "acf-nnff.rda"))
}
if (  file.exists(file.path(PROJHOME , "Results" , "nnff-AICs.rda"))){
AICs = matrix(NA,n.iter,3)
for ( i in 1:n.iter){
mod= try( model2(nn,acf.nnff[[2]],scale = T, var2 = ff, var2.time = F))
AICs[i,] = mod[[3]]
}
save( AICs , file = file.path(PROJHOME , "Results", "nnff-AICs.rda"))
} else {
load( file.path (PROJHOME , "Results" , "nnff-AICs.rda"))
}
whi.mi = which.min(colMeans(AICs))
print( c("simple linear model is best", "random intercepts only","random intercepts and slopes")[whi.mi])
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
p = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
colMeans(stats.nnff.plot[[1]])
median(p)
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
p = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=F)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
colMeans(stats.nnff.plot[[1]])
median(p)
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
mod
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi)
mod
mod = model2( ff, acf.nnff[[2]], scale = T, specify.model = whi.mi)
mod
mod = model2( ff, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
p
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
colMeans(stats.nnff.sca[[1]])
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
colMeans(stats.nnff.sca[[1]])
colMeans(stats.nnff.sca[[5]])
colMeans(stats.nnff.sca[[7]])
median(stats.nnff.sca[[7]])
nn = lr.coh[sq,]
ff = ff.coh
par( mfrow= c(2,1))
acf( as.vector(ff), lag.max = 1000)
acf( as.vector(nn), lag.max = 1000)
if( file.exists(file.path (PROJHOME , "Results" , "acf-nnff.rda"))){
acf.const = 400 # half way between acf values
acf.nnff = list( acf, acf.const)
save( acf.nnff , file = file.path ( PROJHOME, "Results", "acf-nnff.rda") )
} else {
load( file.path (PROJHOME , "Results", "acf-nnff.rda"))
}
if (  file.exists(file.path(PROJHOME , "Results" , "nnff-AICs.rda"))){
AICs = matrix(NA,n.iter,3)
for ( i in 1:n.iter){
mod= try( model2(nn,acf.nnff[[2]],scale = T, var2 = ff, var2.time = F))
AICs[i,] = mod[[3]]
}
save( AICs , file = file.path(PROJHOME , "Results", "nnff-AICs.rda"))
} else {
load( file.path (PROJHOME , "Results" , "nnff-AICs.rda"))
}
whi.mi = which.min(colMeans(AICs))
print( c("simple linear model is best", "random intercepts only","random intercepts and slopes")[whi.mi])
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=T)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
if( file.exists( file.path( PROJHOME , "Results", "stats-nnff-sca.rda"))){
CIs = matrix( NA, n.iter, 2)
fixed.ef = matrix( NA,n.iter,2)
rand.ef  = array( NA, c(6,2,n.iter))
t = rep(NA,n.iter)
r2 = matrix(NA, n.iter,2)
AIC = rep(NA,n.iter)
p = rep(NA,n.iter)
for ( i in 1:n.iter){
mod = model2( nn, acf.nnff[[2]], scale = T, specify.model = whi.mi, var2= ff, var2.time = F, plot=F)
CIs[i,] = mod[[2]]
fixed.ef[i,] = mod[[4]]
if( !is.null(mod[[5]])){
rand.ef[,,i] = matrix(unlist(mod[[5]]), 6,2)
}
t[i] = mod[[7]]
if( length( mod[[6]]) == 1){
r2[i,1]= mod[[6]]
} else {
r2[i,] = mod[[6]]
}
AIC[i]=mod[[3]]
p[i] = mod[[8]]
}
stats.nnff.sca = list( CIs, fixed.ef, rand.ef, t,r2,AIC,p)
save( stats.nnff.sca, file = file.path (PROJHOME , "Results" , "stats-nnff-sca.rda"))
} else {
load( file.path ( PROJHOME , "Results" , "stats-nnff-sca.rda"))
}
colMeans(stats.nnff.sca[[7]])
median(stats.nnff.sca[[7]])
mean.after =  rep (NA,6)
((nrow(ff.coh)-300):nrow(ff.coh))
mean.before = rep (NA,6)
mean.after =  rep (NA,6)
for ( i in 1:6){
mean.before[i] = mean( ff.coh[ 1:300,i])
mean.after [i] = mean( ff.coh[ ((nrow(ff.coh)-300):nrow(ff.coh)),i])
}
mean( mean.before - mean.after)
sd ( mean.before - mean.after)
c( mean( mean.before - mean.after),
sd ( mean.before - mean.after))
load( file.path (PROJHOME , "Output" , "nn-coh.rda"))
### Objects
load( file.path( PROJHOME, "Output", "gGPS", "g2.34.rda")) # load group flight
pigeon = names(data[1,1,]) # pigeon names
cols = c(rainbow(6),"black")
### DATA
load( file.path (PROJHOME  , "Data" , "mass.rda" ))
data = mass[ mass$Pigeon == pigeon[1] |
mass$Pigeon == pigeon[2] |
mass$Pigeon == pigeon[3] |
mass$Pigeon == pigeon[4] |
mass$Pigeon == pigeon[5] |
mass$Pigeon == pigeon[6],]
## LIBRARIES
library(stringr)
dates = str_split_fixed(data$Date , "\\." , 2)
data$Day = ifelse ( dates[,2] == "7" , as.numeric(dates[,1]) +30,
ifelse(dates[,2] == "8", as.numeric(dates[,1]) +61,
ifelse(dates[,2] == "9", as.numeric(dates[,1]) +92,
as.numeric(dates[,1]) )))
cols = rainbow(6)
mean.mass= rep(NA, length(unique(data$Pigeon)))
# time intervals (for number of weighings and interval bet
ti = list()
{plot(data$Weight ~  data$Day , xlim = c(40,57) ,type = "n", ylab = "Mass (g)", xlab = "Days since June 1st 2017")
for ( i in 1:length(unique(data$Pigeon))){
lines(data$Weight[data$Pigeon== unique(data$Pigeon)[i]] ~ data$Day[data$Pigeon== unique(data$Pigeon)[i]], col = cols[i])
mean.mass[i] = mean(data$Weight[data$Pigeon== unique(data$Pigeon)[i]])
ti[[i]] = data$Day[data$Pigeon== unique(data$Pigeon)[i]]
}
abline (v =48, lty = 2)
text   (62, 520 , labels = "Long ass flight (100km)", cex = 0.8)
}
mass = data.frame( before =  data$Weight[data$Day == 41][order(as.numeric(data$Pigeon[data$Day == 41]))],
after  =  data$Weight[data$Day == 50][order(as.numeric(data$Pigeon[data$Day == 50]))],
after2 =  data$Weight[data$Day == 56][order(as.numeric(data$Pigeon[data$Day == 56]))])
mass$diff =  mass$after - mass$before
mass$diff
plot ( c(1,2), c(mass$before[1],mass$after[1]), type = "l", ylim = c(380,480), col = cols[1], ylab = "Mass (g)", xlab = "", xaxt = "n" , xlim = c(0.8,2.2))
axis(1 , at = c(1,2) , labels = c("before" , "after"))
for( i in 2:6){
lines(c(1,2), c(mass$before[i],mass$after[i]), type = "l", col = cols[i], lwd = 2)
}
pdf ( file.path(PROJHOME  , "Figures", "mass.pdf"))
plot ( c(1,2), c(mass$before[1],mass$after[1]), type = "l", ylim = c(380,480), col = cols[1], ylab = "Mass (g)", xlab = "", xaxt = "n" , xlim = c(0.8,2.2))
axis(1 , at = c(1,2) , labels = c("before" , "after"))
for( i in 2:6){
lines(c(1,2), c(mass$before[i],mass$after[i]), type = "l", col = cols[i], lwd = 2)
}
dev.off()
#plot( data$Pigeon)
pdf( file.path(PROJHOME, "Figures", "mass.pdf"))
{plot ( c(11,20,26), c(mass$before[1],mass$after[1],mass$after2[1]), ylim = c(380,480), col = cols[1], ylab = "Mass (g)", xlab = "", xaxt = "n" ,type = "n", xlim = c(10,27))
axis(1 , at = c(11,20,26) ,labels = c("11th July" , "20th July" , "26th July"), main = i)
set.seed(18)
for( i in sample(1:6)){
points(jitter(c(11,20,26),0.14), c(mass$before[i],mass$after[i],mass$after2[i]), col = cols[i], lwd = 2, pch= 19, cex = 2)
}
abline ( v = 18, lty = 2)
}
dev.off()
data.frame =  c( mass$before, mass$after )
t.test( mass$before , mass$after, paired = T)
boxplot(rep(NA,6) ,mass$before, mass$after, rep(NA,6), xaxt = "n")
axis(1, at = c(2,3) , labels = c("before", "after"))
{
par(mfrow = c(2,1))
{plot(data$Weight ~  data$Day , type = "n", ylab = "Mass (g)", xlab = "Days since June 1st 2017", main = "Group 1")
for ( i in g1){
points(data$Weight[data$Pigeon== unique(data$Pigeon)[i]] ~ data$Day[data$Pigeon== unique(data$Pigeon)[i]], col = cols[i])
mean.mass[i] = mean(data$Weight[data$Pigeon== unique(data$Pigeon)[i]])
ti[[i]] = data$Day[data$Pigeon== unique(data$Pigeon)[i]]
}
abline (v =51, lty = 2)
text   (62, 520 , labels = "Long ass flight (100km)", cex = 0.8)
}
{plot(data$Weight ~  data$Day , type = "n", ylab = "Mass (g)", xlab = "Days since June 1st 2017", main = "Group 2")
for ( i in g2){
points(data$Weight[data$Pigeon== unique(data$Pigeon)[i]] ~ data$Day[data$Pigeon== unique(data$Pigeon)[i]], col = cols[i])
mean.mass[i] = mean(data$Weight[data$Pigeon== unique(data$Pigeon)[i]])
ti[[i]] = data$Day[data$Pigeon== unique(data$Pigeon)[i]]
}
abline (v = 48, lty = 2)
text   (62, 520 , labels = "Long ass flight (200km)", cex = 0.8)
}
}
load( file.path( PROJHOME , "Output" , "gGPS" , "g2.34.rda") )
dim(data)
data[1:20,,1]
dis.array = array( NA, c(23401, 7,7))
for ( i in 1:7){
for ( j in 1:7){
if ( i != j)
dis.array[,j,i] = get_dist(data[,1,i], data[,2,i], data[,1,j], data[,2,j], method = "distance")
}
print(i)
}
{
par(mfrow = c(4,2))
for ( i in 1:7){
bm_plotDS(mat[,i], 50, plot.error = F, ylab = "Closest neighbour (m)")
}
}
qq
# fit glmer
m2 =lmer( data = nn, nn ~ time + (1+ time|id)  )
